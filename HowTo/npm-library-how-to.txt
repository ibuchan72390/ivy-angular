I'm typing this out because this was kind of a huge pain in the ass for me to figure out.
We need to do a couple of things in order to create a re-usable NPM package that can be properly uploaded to a package stream.

1. Create a package.json file (execute "npm init" on command line if necessary)

2. I suggest we add the following script block to improve upon the working environment:
"scripts": {
	"prepublish": "tsc",
	"test-publish": "concurrently \"tsc\" \"npm link\"",
	"publish": "concurrently \"tsc\" \"npm publish\""
},

3. Setup the package.json with the name as the desired name of the final package

4. Create an index.ts barrel file at the root of the solution

5. The barrel file should export the module as well as all of the files the end user will consume.

6. Update the package.json and add the following line: "typings": "./index.d.ts"
	- This is the key that will ensure we can simply reference our npm package by name
	
7. Setup a tsconfig.json similar to the following
{
  "compilerOptions": {
    "noImplicitAny": true,
    "module": "commonjs",
    "target": "ES5",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "sourceMap": true,
    "declaration": true,
    "lib": [ "es6", "dom" ]
  },
  "files": [
    "index.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

8.  Test the file in your target project using npm link commands.
	- Execute "npm link" from the source npm project, this will add it to your local cache stream
	- Go to your consuming project and execute "npm link <proj.name>", this will add a symlink
	- To update, repeat the above with both "npm link" and "npm link <proj.name>" commands

9. When everything tests okay with the above pattern, we can move to the publish process